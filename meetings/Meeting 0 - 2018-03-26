Brad: Owns mission and overarching comms between the event side and the tech side.
Will: Administrates the tech side

Mission: Battlesnake will make programming fun and accessible for millions of people

We're kicking pycon's ass (relatively)

Tagline: Programming for fun and glory.

Core values

1.  teaches real-world programming skills.  
No snake only language. Real world tech.
Enable you to be a programmer.

2. Celebrates a broad range of skill levels.  "if you get your snake to move you should be celerbrated.  If you win advanced it's also cool"

3. encourages collaboration over competition - Open source your snake, share everything.  Shouldn't be for the money, should be for the fun and teaching.

4. Embraces open-source.  Allows us to teach, and be a role model.

5. Builds community.  - All year round conversations  Why does snakedown exist outside of us.  How can we run slack and wikis and discords talking about strategy.

6. Should be fun to watch.   Its so simple that anyone can turn up and understand.  Most people of most ages can figure it out from a spectator point of view.  Shoutcasting, people on stage, microphones, is fun and inspiring.  Part of it is the spectacle of the thing.  Makes it accessible as a fun thing to watch.

-------------

Tech goals
- 1,000 people at 2019.  Eg 2018 (400 parctipants, 125 watching, 75 volunteers)
- Provide software that we own and are proud of.
- Run a smooth tournament.
- Build strong technical resources for all participants.  Better docs, more languages
- launch play.battlesnake.io and run it all year round.
- Be an open source role model.

Tech decisions
- use github for everything github.com/battlesnakeio  (code, bugs, wikis, roadmaps) 
- Fork and create PRs.
- model after open source communities, 
- Multirepo with concrete owners.
- Game master role.  (owns the exeperience of the game) 
- this is all volunteer work. - Stay posted we're working on getting more time for SWU people.


-----------------

John: Two owners per repo.
SWU owns anything they want.
Gaps to be filled in by the community.

Repos

Infrastructure (Colin, Daniel)

Game Engine (Daniel + Colin) 
Requirements - persistent storage of game data.
NAME: engine

App (John + Colin)
Requirements - leader board, where to view games.
NAME: play

Game Board (Rob? + Jem?)
JavaScript
NAME: board

Static Site (Will + Brad)
Requirements - www, blog, tutorial (Brandon)
NAME: website

Docs (Will + Brad) 
NAME: documentation

Issues collection (Will)
NAME: roadmap

Community repo (John + Will)
How do you get started, what the process is, and the owners and global architecture.
NAME: community

Branded content (Brad)
NAME: branding
License: lock it down.

--------------

Torben - Eco system can be generated for public APIs.  (replay, statistics, value add, match history, leaderboard, - extensions like big data processing, eg starcraft researchers at SFU do psych research on that data)   Cool stats can be pulled out.
Brad - with an API key you could build your own UI
Daniel - yearly dump of data like stack overflow.
